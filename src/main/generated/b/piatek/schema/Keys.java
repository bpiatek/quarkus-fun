/*
 * This file is generated by jOOQ.
 */
package b.piatek.schema;


import b.piatek.schema.tables.Author;
import b.piatek.schema.tables.FlywaySchemaHistory;
import b.piatek.schema.tables.Post;
import b.piatek.schema.tables.Testuser;
import b.piatek.schema.tables.Users;
import b.piatek.schema.tables.records.AuthorRecord;
import b.piatek.schema.tables.records.FlywaySchemaHistoryRecord;
import b.piatek.schema.tables.records.PostRecord;
import b.piatek.schema.tables.records.TestuserRecord;
import b.piatek.schema.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AuthorRecord> AUTHOR_PKEY = Internal.createUniqueKey(Author.AUTHOR, DSL.name("author_pkey"), new TableField[] { Author.AUTHOR.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<PostRecord> POST_PKEY = Internal.createUniqueKey(Post.POST, DSL.name("post_pkey"), new TableField[] { Post.POST.ID }, true);
    public static final UniqueKey<TestuserRecord> TESTUSER_PKEY = Internal.createUniqueKey(Testuser.TESTUSER, DSL.name("testuser_pkey"), new TableField[] { Testuser.TESTUSER.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<PostRecord, AuthorRecord> POST__POST_AUTHORID_FKEY = Internal.createForeignKey(Post.POST, DSL.name("post_authorid_fkey"), new TableField[] { Post.POST.AUTHORID }, Keys.AUTHOR_PKEY, new TableField[] { Author.AUTHOR.ID }, true);
}
