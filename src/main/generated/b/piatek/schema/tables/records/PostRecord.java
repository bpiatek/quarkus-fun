/*
 * This file is generated by jOOQ.
 */
package b.piatek.schema.tables.records;


import b.piatek.schema.tables.Post;
import b.piatek.schema.tables.interfaces.IPost;

import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PostRecord extends UpdatableRecordImpl<PostRecord> implements VertxPojo, Record3<Integer, String, Integer>, IPost {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.post.id</code>.
     */
    @Override
    public PostRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.post.id</code>.
     */
    @Override
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.post.message</code>.
     */
    @Override
    public PostRecord setMessage(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.post.message</code>.
     */
    @Override
    public String getMessage() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.post.authorid</code>.
     */
    @Override
    public PostRecord setAuthorid(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.post.authorid</code>.
     */
    @Override
    public Integer getAuthorid() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Post.POST.ID;
    }

    @Override
    public Field<String> field2() {
        return Post.POST.MESSAGE;
    }

    @Override
    public Field<Integer> field3() {
        return Post.POST.AUTHORID;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getMessage();
    }

    @Override
    public Integer component3() {
        return getAuthorid();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getMessage();
    }

    @Override
    public Integer value3() {
        return getAuthorid();
    }

    @Override
    public PostRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public PostRecord value2(String value) {
        setMessage(value);
        return this;
    }

    @Override
    public PostRecord value3(Integer value) {
        setAuthorid(value);
        return this;
    }

    @Override
    public PostRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IPost from) {
        setId(from.getId());
        setMessage(from.getMessage());
        setAuthorid(from.getAuthorid());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IPost> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PostRecord
     */
    public PostRecord() {
        super(Post.POST);
    }

    /**
     * Create a detached, initialised PostRecord
     */
    public PostRecord(Integer id, String message, Integer authorid) {
        super(Post.POST);

        setId(id);
        setMessage(message);
        setAuthorid(authorid);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PostRecord
     */
    public PostRecord(b.piatek.schema.tables.pojos.Post value) {
        super(Post.POST);

        if (value != null) {
            setId(value.getId());
            setMessage(value.getMessage());
            setAuthorid(value.getAuthorid());
            resetChangedOnNotNull();
        }
    }

        public PostRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
