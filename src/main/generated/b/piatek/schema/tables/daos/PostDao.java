/*
 * This file is generated by jOOQ.
 */
package b.piatek.schema.tables.daos;


import b.piatek.schema.tables.Post;
import b.piatek.schema.tables.records.PostRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.smallrye.mutiny.Uni;
import io.github.jklingsporn.vertx.jooq.mutiny.reactive.ReactiveMutinyQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PostDao extends AbstractReactiveVertxDAO<PostRecord, b.piatek.schema.tables.pojos.Post, Integer, Uni<List<b.piatek.schema.tables.pojos.Post>>, Uni<b.piatek.schema.tables.pojos.Post>, Uni<Integer>, Uni<Integer>> implements io.github.jklingsporn.vertx.jooq.mutiny.VertxDAO<PostRecord,b.piatek.schema.tables.pojos.Post,Integer> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public PostDao(Configuration configuration, io.vertx.mutiny.sqlclient.SqlClient delegate) {
                super(Post.POST, b.piatek.schema.tables.pojos.Post.class, new ReactiveMutinyQueryExecutor<PostRecord,b.piatek.schema.tables.pojos.Post,Integer>(configuration,delegate,b.piatek.schema.tables.mappers.RowMappers.getPostMapper()));
        }

        @Override
        protected Integer getId(b.piatek.schema.tables.pojos.Post object) {
                return object.getId();
        }

        /**
     * Find records that have <code>message IN (values)</code> asynchronously
     */
        public Uni<List<b.piatek.schema.tables.pojos.Post>> findManyByMessage(Collection<String> values) {
                return findManyByCondition(Post.POST.MESSAGE.in(values));
        }

        /**
     * Find records that have <code>message IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Uni<List<b.piatek.schema.tables.pojos.Post>> findManyByMessage(Collection<String> values, int limit) {
                return findManyByCondition(Post.POST.MESSAGE.in(values),limit);
        }

        /**
     * Find records that have <code>authorid IN (values)</code> asynchronously
     */
        public Uni<List<b.piatek.schema.tables.pojos.Post>> findManyByAuthorid(Collection<Integer> values) {
                return findManyByCondition(Post.POST.AUTHORID.in(values));
        }

        /**
     * Find records that have <code>authorid IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Uni<List<b.piatek.schema.tables.pojos.Post>> findManyByAuthorid(Collection<Integer> values, int limit) {
                return findManyByCondition(Post.POST.AUTHORID.in(values),limit);
        }

        @Override
        public ReactiveMutinyQueryExecutor<PostRecord,b.piatek.schema.tables.pojos.Post,Integer> queryExecutor(){
                return (ReactiveMutinyQueryExecutor<PostRecord,b.piatek.schema.tables.pojos.Post,Integer>) super.queryExecutor();
        }
}
