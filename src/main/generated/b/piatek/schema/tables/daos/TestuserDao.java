/*
 * This file is generated by jOOQ.
 */
package b.piatek.schema.tables.daos;


import b.piatek.schema.tables.Testuser;
import b.piatek.schema.tables.records.TestuserRecord;

import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;

import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.smallrye.mutiny.Uni;
import io.github.jklingsporn.vertx.jooq.mutiny.reactive.ReactiveMutinyQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestuserDao extends AbstractReactiveVertxDAO<TestuserRecord, b.piatek.schema.tables.pojos.Testuser, Long, Uni<List<b.piatek.schema.tables.pojos.Testuser>>, Uni<b.piatek.schema.tables.pojos.Testuser>, Uni<Integer>, Uni<Long>> implements io.github.jklingsporn.vertx.jooq.mutiny.VertxDAO<TestuserRecord,b.piatek.schema.tables.pojos.Testuser,Long> {

        /**
     * @param configuration The Configuration used for rendering and query
     * execution.
     * @param vertx the vertx instance
     */
        public TestuserDao(Configuration configuration, io.vertx.mutiny.sqlclient.SqlClient delegate) {
                super(Testuser.TESTUSER, b.piatek.schema.tables.pojos.Testuser.class, new ReactiveMutinyQueryExecutor<TestuserRecord,b.piatek.schema.tables.pojos.Testuser,Long>(configuration,delegate,b.piatek.schema.tables.mappers.RowMappers.getTestuserMapper()));
        }

        @Override
        protected Long getId(b.piatek.schema.tables.pojos.Testuser object) {
                return object.getId();
        }

        /**
     * Find records that have <code>password IN (values)</code> asynchronously
     */
        public Uni<List<b.piatek.schema.tables.pojos.Testuser>> findManyByPassword(Collection<String> values) {
                return findManyByCondition(Testuser.TESTUSER.PASSWORD.in(values));
        }

        /**
     * Find records that have <code>password IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Uni<List<b.piatek.schema.tables.pojos.Testuser>> findManyByPassword(Collection<String> values, int limit) {
                return findManyByCondition(Testuser.TESTUSER.PASSWORD.in(values),limit);
        }

        /**
     * Find records that have <code>roles IN (values)</code> asynchronously
     */
        public Uni<List<b.piatek.schema.tables.pojos.Testuser>> findManyByRoles(Collection<String> values) {
                return findManyByCondition(Testuser.TESTUSER.ROLES.in(values));
        }

        /**
     * Find records that have <code>roles IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Uni<List<b.piatek.schema.tables.pojos.Testuser>> findManyByRoles(Collection<String> values, int limit) {
                return findManyByCondition(Testuser.TESTUSER.ROLES.in(values),limit);
        }

        /**
     * Find records that have <code>username IN (values)</code> asynchronously
     */
        public Uni<List<b.piatek.schema.tables.pojos.Testuser>> findManyByUsername(Collection<String> values) {
                return findManyByCondition(Testuser.TESTUSER.USERNAME.in(values));
        }

        /**
     * Find records that have <code>username IN (values)</code> asynchronously
     * limited by the given limit
     */
        public Uni<List<b.piatek.schema.tables.pojos.Testuser>> findManyByUsername(Collection<String> values, int limit) {
                return findManyByCondition(Testuser.TESTUSER.USERNAME.in(values),limit);
        }

        @Override
        public ReactiveMutinyQueryExecutor<TestuserRecord,b.piatek.schema.tables.pojos.Testuser,Long> queryExecutor(){
                return (ReactiveMutinyQueryExecutor<TestuserRecord,b.piatek.schema.tables.pojos.Testuser,Long>) super.queryExecutor();
        }
}
